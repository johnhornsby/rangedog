{"version":3,"sources":["public/assets/scripts/src/animators/frictionanimator.js"],"names":[],"mappings":";;;;;;;MACM,gBAAgB;AAET,aAFP,gBAAgB,GAEN;4BAFV,gBAAgB;;AAGlB,UAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AAClB,UAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;AACpB,UAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACtB,UAAI,CAAC,WAAW,GAAG,GAAG,CAAC;AACvB,UAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnB,UAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,UAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,UAAI,CAAC,cAAc,EAAE,CAAC;KACvB;;iBAXG,gBAAgB;;aAcN,0BAAG;;AAEf,YAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAA,GAAI,IAAI,CAAC,QAAQ,CAAC;AAChE,YAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AAClB,YAAI,CAAC,OAAO,EAAE,CAAC;OAChB;;;aAEM,mBAAG;;AAER,YAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,CAAC;AACnC,YAAI,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;;AAExB,eAAO,CAAC,GAAG,mBAAiB,IAAI,CAAC,YAAY,kBAAa,IAAI,CAAC,QAAQ,CAAG,CAAA;;AAE1E,YAAI,CAAC,QAAQ,IAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,AAAC,CAAC;;AAErC,YAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,oBAAkB,IAAI,CAAC,CAAC,aAAU,CAAC;;AAElE,YAAK,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,QAAQ,GAAC,GAAG,CAAC,GAAG,CAAC,EAAG;AACxC,+BAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAChD,MAAM;AACL,cAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,oBAAkB,IAAI,CAAC,WAAW,aAAU,CAAC;SAC7E;;;AAGD,YAAI,CAAC,YAAY,GAAG,CAAC,CAAC;;AAEtB,YAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;OACzB;;;WA1CG,gBAAgB","file":"public/assets/scripts/src/animators/frictionanimator.js","sourcesContent":["\nclass FrictionAnimator {\n  \n  constructor() {\n    this.velocity = 0;\n    this.friction = 0.1;\n    this.acceleration = 0;\n    this.destination = 100;\n    this.previousX = 0;\n    this.x = 0;\n    this.elem = document.getElementsByClassName('block')[0];\n    this.startAnimation();\n  }\n  \n  \n  startAnimation() {\n    // calcuates the initial acceleration based on the distance and the friction.\n    this.acceleration = (this.destination - this.x) * this.friction;\n    this.velocity = 0;\n    this.animate();\n  }\n  \n  animate() {\n    \n    this.velocity += this.acceleration;\n    this.x += this.velocity;\n    \n    console.log(`acceleration ${this.acceleration} velocity ${this.velocity}`)\n    \n    this.velocity *= (1 - this.friction);\n    \n    this.elem.style.webkitTransform = `translate3d(${this.x}px,0, 0)`;\n    \n    if ( Math.round( this.velocity*100) > 0 ) {\n      requestAnimationFrame(this.animate.bind(this));\n    } else {\n      this.elem.style.webkitTransform = `translate3d(${this.destination}px,0, 0)`;\n    }\n    \n    // reset the acceleration as this is set initially\n    this.acceleration = 0;\n    \n    this.previousX = this.x;\n  }\n  \n}"]}